#!/usr/bin/env bash
# bin/compile BUILD_DIR CACHE_DIR ENV_DIR

BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3

# exit when any command fails
set -e

# load Heroku `WKHTMLTOPDF_BINARY_URL` env var if it exists

WKHTMLTOPDF_BINARY_URL_ENV_PATH="$ENV_DIR/WKHTMLTOPDF_BINARY_URL"

if [ -f $WKHTMLTOPDF_BINARY_URL_ENV_PATH ]; then
  BINARY_URL=$(cat $WKHTMLTOPDF_BINARY_URL_ENV_PATH)
else
  BINARY_URL="https://github.com/wkhtmltopdf/packaging/releases/download/0.12.6.1-2/wkhtmltox_0.12.6.1-2.jammy_amd64.deb"
fi

# helpers

BINARY_FILENAME=$(basename $BINARY_URL)
BINARY_OUTPUT_PATH=$BUILD_DIR/bin

WORKING_DIR=$CACHE_DIR/heroku-buildpack-wkhtmltopdf
DOWNLOAD_FILENAME=$WORKING_DIR/$BINARY_FILENAME
EXTRACT_DIR=$WORKING_DIR/output

function info() {
  echo "-----> $*"
}

# use Heroku cache to store downloaded and extracted binary

if [ ! -d $WORKING_DIR ]; then
  mkdir -p $WORKING_DIR

  info "Fetching binary from $BINARY_URL"

  echo "Downloading to $DOWNLOAD_FILENAME"
  wget $BINARY_URL -qcO $DOWNLOAD_FILENAME

  echo "Extracting"
  dpkg -x $DOWNLOAD_FILENAME $EXTRACT_DIR

  info "Cleaning up"

  echo "Removing all but $EXTRACT_DIR/usr/local/bin, which contains our binaries"
  mv $EXTRACT_DIR/usr/local/bin $WORKING_DIR/tmp
  rm -rf $EXTRACT_DIR
  mv $WORKING_DIR/tmp $EXTRACT_DIR

  echo 'Removing binary download, remaining files will be cached for future builds'
  rm -f $DOWNLOAD_FILENAME
else
  info 'Using cached binary. What could possibly go wrong?!'
  echo $'If cache is corrupt or you\'re just feeling adventurous, clear it by running
`heroku plugins:install heroku-builds && heroku builds:cache:purge` locally'
fi

# copy and register to PATH

info 'Installing'

if [ ! -d $BINARY_OUTPUT_PATH ]; then
  mkdir -p $BINARY_OUTPUT_PATH
fi

echo "Copying files to $BINARY_OUTPUT_PATH"
cp $EXTRACT_DIR/* $BINARY_OUTPUT_PATH

echo 'Registering with PATH variable'
export PATH="$BINARY_OUTPUT_PATH:$PATH"

echo 'wkhtmltopdf and its sidekick, wkhtmltoimage, are successfully installed'
